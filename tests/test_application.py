import pytest
import sys
import os
from unittest.mock import Mock
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src')))

from application import Application, Document, ApplicationStatus

@pytest.mark.parametrize(
    "docs, expected_status",
    [
        # –¢–µ—Å—Ç 1: –û–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç ‚Üí APPROVED
        ([Document("–ø–∞—Å–ø–æ—Ä—Ç", True)], ApplicationStatus.APPROVED),

        # –¢–µ—Å—Ç 2: –û–¥–∏–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ‚Üí REJECTED
        ([Document("–ø–∞—Å–ø–æ—Ä—Ç", False)], ApplicationStatus.REJECTED),

        # –¢–µ—Å—Ç 3: –í–∞–ª–∏–¥–Ω—ã–π + –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π ‚Üí REJECTED
        ([Document("1", True), Document("2", False)], ApplicationStatus.REJECTED),

        # –¢–µ—Å—Ç 4: –í—Å–µ –≤–∞–ª–∏–¥–Ω—ã–µ ‚Üí APPROVED
        ([Document("1", True), Document("2", True)], ApplicationStatus.APPROVED),

        # –¢–µ—Å—Ç 5: –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ ‚Üí APPROVED (–ø–æ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ)
        ([], ApplicationStatus.APPROVED),
    ]
)
def test_application_with_various_inputs(docs, expected_status):
    app = Application(childname="–¢–µ—Å—Ç–æ–≤—ã–π", documents=docs)
    result = app.submit()
    assert result == expected_status

# –¢–µ—Å—Ç 1: –û–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
def test_single_valid_document():
    doc = Document(name="–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ", valid=True)
    app = Application(childname="–ò–≤–∞–Ω", documents=[doc])
    status = app.submit()
    assert status == ApplicationStatus.APPROVED

# –¢–µ—Å—Ç 2: –û–¥–∏–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
def test_single_invalid_document():
    doc = Document(name="–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ", valid=False)
    app = Application(childname="–ú–∞—Ä–∏—è", documents=[doc])
    status = app.submit()
    assert status == ApplicationStatus.REJECTED

# –¢–µ—Å—Ç 3: –û–¥–∏–Ω –≤–∞–ª–∏–¥–Ω—ã–π + –æ–¥–∏–Ω –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
def test_mixed_documents():
    docs = [
        Document(name="–°–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ", valid=True),
        Document(name="–ü–∞—Å–ø–æ—Ä—Ç", valid=False)
    ]
    app = Application(childname="–ü–µ—Ç—Ä", documents=docs)
    status = app.submit()
    assert status == ApplicationStatus.REJECTED

# üîπ –¢–µ—Å—Ç —Å mock-–¥–æ–∫—É–º–µ–Ω—Ç–æ–º
def test_mock_document_rejected():
    mock_doc = Mock()
    mock_doc.is_valid.return_value = False

    app = Application(childname="–¢–µ—Å—Ç–æ–≤—ã–π", documents=[mock_doc])
    result = app.submit()

    assert result == ApplicationStatus.REJECTED